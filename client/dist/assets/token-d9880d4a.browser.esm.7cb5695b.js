var w=Object.defineProperty;var C=(i,e,t)=>e in i?w(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t;var c=(i,e,t)=>(C(i,typeof e!="symbol"?e+"":e,t),t);import{aq as u,B as g,bo as y,ak as b,al as T,am as E,ck as v,ao as R,aF as f,ap as S,ar as p,as as W}from"./index.0708ba85.js";import{C as A,a as B,b as F,G as O}from"./contract-appuri-2a88c8fb.browser.esm.25c28503.js";import{C as V}from"./contract-interceptor-6f8989ff.browser.esm.bab3be8e.js";import{C as M}from"./contract-platform-fee-36bf5ae3.browser.esm.d72a8814.js";import{C as P}from"./contract-roles-fa8ea1ef.browser.esm.b9f06d57.js";import{C as x}from"./contract-sales-51bfc7b5.browser.esm.d0c8e4bd.js";import{a as D}from"./erc-20-ca68c3c2.browser.esm.f8f3eede.js";import{S as H}from"./erc-20-standard-a3d4c38d.browser.esm.149d2abd.js";import"./assertEnabled-bf987093.browser.esm.b8916aaa.js";import"./drop-claim-conditions-12b93933.browser.esm.3d5bb886.js";import"./index.c05fda0a.js";import"./signature-ff05b7f7.browser.esm.be1d49c2.js";import"./setErc20Allowance-f181219a.browser.esm.a541b727.js";class I{constructor(e,t){this.contractWrapper=e,this.events=t}async getAllHolderBalances(){const t=(await this.events.getEvents("Transfer")).map(a=>a.data),r={};t.forEach(a=>{const n=a==null?void 0:a.from,o=a==null?void 0:a.to,d=a==null?void 0:a.value;n!==u&&(n in r||(r[n]=g.from(0)),r[n]=r[n].sub(d)),o!==u&&(o in r||(r[o]=g.from(0)),r[o]=r[o].add(d))});const s=Object.entries(r),h=await Promise.all(s.map(a=>{let[,n]=a;return y(this.contractWrapper.getProvider(),this.contractWrapper.address,n)}));return s.map((a,n)=>{let[o]=a;return{holder:o,balance:h[n]}})}}const m=class extends H{constructor(t,r,s){let h=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},a=arguments.length>4?arguments[4]:void 0,n=arguments.length>5?arguments[5]:void 0,o=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new T(t,r,a,h,s);super(o,s,n);c(this,"mint",p(async t=>this.erc20.mint.prepare(t)));c(this,"mintTo",p(async(t,r)=>this.erc20.mintTo.prepare(t,r)));c(this,"mintBatchTo",p(async t=>this.erc20.mintBatchTo.prepare(t)));c(this,"delegateTo",p(async t=>W.fromContractWrapper({contractWrapper:this.contractWrapper,method:"delegate",args:[await f(t)]})));c(this,"burn",p(t=>this.erc20.burn.prepare(t)));c(this,"burnFrom",p(async(t,r)=>this.erc20.burnFrom.prepare(t,r)));this.abi=E.parse(a||[]),this.metadata=new A(this.contractWrapper,v,this.storage),this.app=new B(this.contractWrapper,this.metadata,this.storage),this.roles=new P(this.contractWrapper,m.contractRoles),this.sales=new x(this.contractWrapper),this.events=new F(this.contractWrapper),this.history=new I(this.contractWrapper,this.events),this.encoder=new R(this.contractWrapper),this.estimator=new O(this.contractWrapper),this.platformFees=new M(this.contractWrapper),this.interceptor=new V(this.contractWrapper),this.signature=new D(this.contractWrapper,this.roles)}async getVoteBalance(){return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress())}async getVoteBalanceOf(t){return await this.erc20.getValue(await this.contractWrapper.read("getVotes",[t]))}async getDelegation(){return await this.getDelegationOf(await this.contractWrapper.getSignerAddress())}async getDelegationOf(t){return await this.contractWrapper.read("delegates",[await f(t)])}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[S("transfer"),u])}async getMintTransaction(t,r){return this.erc20.getMintTransaction(t,r)}async prepare(t,r,s){return W.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:s})}async call(t,r,s){return this.contractWrapper.call(t,r,s)}};let l=m;c(l,"contractRoles",b);export{l as Token};
